buildscript {
    ext {
        springBootVersion = '2.2.2.RELEASE'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.yaml:snakeyaml:1.17")
        classpath('com.github.spullara.mustache.java:compiler:0.9.5')
    }
}

plugins {
    id 'maven'
    id 'java'
    id 'eclipse'
}

project.ext.set("generatedDir","${buildDir}/generatecode/src/main/java")

sourceCompatibility = 1.8

ext {
    retrofitVersion = '2.3.0'
    mockitoVersion = '2.10.0'
    autoValueVersion = '1.7'
    okhttpVersion = '3.4.1'
}

apply from: "CodeGenerator.gradle"
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

sourceSets {
    main {
        java {
            srcDirs generatedDir
            srcDirs 'src/main/java'
        }
    }
}

dependencies {
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.10.1'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.1'

    compile "com.google.auto.value:auto-value-annotations:${autoValueVersion}"
    annotationProcessor "com.google.auto.value:auto-value:${autoValueVersion}"
    annotationProcessor "com.google.auto.value:auto-value-annotations:${autoValueVersion}"
    compile "com.google.auto.value:auto-value:${autoValueVersion}"

    compile "com.squareup.okhttp3:logging-interceptor:${okhttpVersion}"
    compile "com.squareup.okhttp3:okhttp:${okhttpVersion}"

    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-jackson:${retrofitVersion}"

    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation 'junit:junit:4.12'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'

    compile('org.springframework.boot:spring-boot-starter-web:2.2.4.RELEASE')
    compile('org.apache.commons:commons-lang3:3.7')
    testCompile('org.springframework.boot:spring-boot-starter-test:2.2.4.RELEASE')
}

repositories {
    mavenCentral()
    maven {
        credentials {
            username mavenUser
            password mavenPassword
        }
        url mavenRepo
    }
}

bootJar{
    manifest{
        attributes.put("Jenkins-Build", getJenkinsBuildNumber())
        attributes.put("Jenkins-Workspace", getJenkinsWorkspace());
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: mavenRepo) {
                authentication(userName: mavenUser, password: mavenPassword)
            }
            addFilter("springBoot") {artifact, file ->
                artifact.name == project.name
            }
            pom('springBoot').version = version + "-SNAPSHOT"
            pom('springBoot').artifactId = rootProject.name
            pom('springBoot').groupId = groupId
        }
    }
}

def getJenkinsBuildNumber(){
    def isSet = project.ext.has("jenkinsBuild") && project.ext.get("jenkinsBuild") != ""
    return isSet ? project.ext.jenkinsBuild : "fakeNumber"
}

def getJenkinsWorkspace(){
    def isSet = project.ext.has("jenkinsWorkspace") && project.ext.get("jenkinsWorkspace") != ""
    return isSet ? project.ext.jenkinsWorkspace : "fakeNumber"
}

eclipse {
	classpath {
		defaultOutputDir = file("build")
		file.whenMerged {
			entries.each { entry ->
				if(entry.kind == 'src' && entry.hasProperty('output')) {
					entry.output = entry.output.replace('bin/', "build/classes/java/")
				}
			}
		}
	}
}
